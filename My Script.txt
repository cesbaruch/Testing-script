local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "                                üå¥Island Tribes Dupingüå¥",
    LoadingTitle = "WSP",
    LoadingSubtitle = "",
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil, 
       FileName = "Nigga 69"
    },

    KeySystem = true,
    KeySettings = {
       Title = "üå¥Island Tribes üå¥",
       Subtitle = "Created by Cesar" ,
       Note = "In Honour of Kchungdz" ,
       FileName = "0", 
       SaveKey = False,
       GrabKeyFromSite = true,
       Key = {"210809"}
    }
 })

 local MainTab = Window:CreateTab("üè† Main", nil) 
 local MainSection = MainTab:CreateSection("Other Scripts")


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Check if player is alive
local function IsPlayerAlive(player)
    return player and player.Character and player.Character:FindFirstChild("HumanoidRootPart")
end

-- Get the nearest storage chest
local function GetClosestChest()
    local closest
    local range = math.huge
    local replicators = Workspace:FindFirstChild("Replicators")
    if not replicators then return nil end

    local chestFolder = replicators:FindFirstChild("NonPassive") or replicators:FindFirstChild("Passive")
    if not chestFolder then return nil end

    if IsPlayerAlive(LocalPlayer) then
        local hrp = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        for _, chest in pairs(chestFolder:GetChildren()) do
            if string.find(chest.Name, "Storage") and chest:FindFirstChildOfClass("MeshPart") then
                local part = chest:FindFirstChildOfClass("MeshPart")
                local dist = (hrp.Position - part.Position).Magnitude
                if dist < range then
                    range = dist
                    closest = chest
                end
            end
        end
    end

    return closest
end
